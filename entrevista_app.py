import streamlit as st
import time
from datetime import datetime
from enviar_a_monday import enviar_a_monday


def normalizar_telefono(telefono):
    telefono = telefono.strip()
    if not telefono.startswith("+"):
        return f"+34 {telefono}"
    return telefono


def login():
    entrevistadores = {
        "Keko": "frmichelin@grupogomez.es",
        "Maika": "m.demiguel@grupogomez.es",
        "Alba": "a.alandi@grupogomez.es",
        "Cristina": "c.domenech@grupogomez.es",
        "Maria": "maria.martin@grupogomez.es",
        "Vlad": "v.cobusneanu@grupogomez.es",
        "Julio": "j.barzola@grupogomez.es",
        "Vanesa": "v.gomez@grupogomez.es",
        "Mada": "mada.broton@grupogomez.es"
    }

    st.markdown("<div style='height: 500pt'></div>", unsafe_allow_html=True)

    if "entrevistador" not in st.session_state:
        st.session_state.entrevistador = None

    if st.session_state.entrevistador is None:
        entrevistador = st.selectbox("Selecciona tu nombre", list(entrevistadores.keys()))
        if st.button("Entrar"):
            st.session_state.entrevistador = {
                "nombre": entrevistador,
                "correo": entrevistadores[entrevistador]
            }
            st.experimental_rerun()
    else:
        st.markdown(f"<div style='display: flex; justify-content: space-between; align-items: center;'>"
                    f"<h3>Bienvenid@ {st.session_state.entrevistador['nombre']}</h3>"
                    f"<form action='' method='post'><button name='logout'>Cerrar sesi√≥n</button></form>"
                    f"</div>", unsafe_allow_html=True)

        if st.form_submit_button("Cerrar sesi√≥n", key="logout"):
            st.session_state.entrevistador = None
            st.experimental_rerun()


def pantalla_rol():
    st.markdown("<div style='height: 500pt'></div>", unsafe_allow_html=True)
    st.title("Selecciona el puesto de la entrevista")

    roles = {
        "üçΩÔ∏è Camarero": "camarero",
        "üî™ Cocinero": "cocinero",
        "üë©‚Äç‚úàÔ∏è Hostess": "hostess",
        "üëî Director": "director",
        "üë®‚Äçüç≥ Jefe de Cocina": "jefe_cocina",
        "üßº Friegue": "friegue",
        "üöö Repartidor": "repartidor"
    }

    cols = st.columns(len(roles))
    for i, (emoji_label, rol) in enumerate(roles.items()):
        if cols[i].button(emoji_label):
            st.session_state.rol = rol
            st.session_state.pagina = "datos"
            st.experimental_rerun()


def pantalla_datos():
    st.markdown("<div style='height: 500pt'></div>", unsafe_allow_html=True)
    st.title("Datos del candidato")

    with st.form("form_datos"):
        nombre = st.text_input("Nombre completo")
        telefono = st.text_input("Tel√©fono")
        correo = st.text_input("Correo electr√≥nico")
        via = st.selectbox("Tipo de v√≠a", ["Calle", "Avenida", "Plaza", "Otro"])
        nombre_via = st.text_input("Nombre de la v√≠a")
        numero = st.text_input("N√∫mero")
        puerta = st.text_input("Puerta")
        cp = st.text_input("C√≥digo Postal")
        ciudad = st.text_input("Ciudad")

        if st.form_submit_button("Comenzar entrevista"):
            st.session_state.datos = {
                "nombre": nombre,
                "telefono": normalizar_telefono(telefono),
                "correo": correo,
                "via": via,
                "nombre_via": nombre_via,
                "numero": numero,
                "puerta": puerta,
                "cp": cp,
                "ciudad": ciudad,
                "entrevistador_email": st.session_state.entrevistador["correo"],
                "rol": st.session_state.rol
            }
            st.session_state.pagina = "entrevista"
            st.session_state.pregunta_actual = 0
            st.session_state.puntuaciones = []
            st.session_state.evaluaciones = []
            st.session_state.tiempos = []
            st.experimental_rerun()


def entrevista():
    preguntas_generales = [
        "¬øD√≥nde vives actualmente y c√≥mo sueles desplazarte al trabajo? En caso de utilizar transporte p√∫blico, ¬øc√≥mo te organizas si sales del local despu√©s del √∫ltimo servicio (por ejemplo, fuera del horario del metro)?",
        "¬øTienes disponibilidad para trabajar por la noche y los fines de semana? ¬øPodr√≠as desplazarte sin problema a cualquiera de nuestros locales en esos horarios?",
        "¬øQu√© idiomas hablas y cu√°l es tu nivel en cada uno de ellos? Puedes mencionar si tienes fluidez al hablar, escribir o entender, y si los utilizas habitualmente en el trabajo.",
        "¬øQu√© es lo que m√°s te gustaba y lo que menos de tu √∫ltimo trabajo? ¬øPor qu√© motivo decidiste dejarlo?",
        "¬øC√≥mo describir√≠as el ambiente de trabajo en tus empleos anteriores? ¬øQu√© tal era tu relaci√≥n con los compa√±eros y el equipo?"
    ]
    preguntas_especificas = [
        f"P{i+1} espec√≠fica del rol {st.session_state.rol}" for i in range(8)
    ]

    todas_preguntas = preguntas_generales + preguntas_especificas

    idx = st.session_state.pregunta_actual
    if idx >= len(todas_preguntas):
        st.session_state.pagina = "resultados"
        st.experimental_rerun()

    st.title(f"Pregunta {idx + 1}")
    st.markdown("Tienes 120 segundos para responder.")

    start_time = time.time()
    respuesta = st.text_area("Tu respuesta:")

    if st.button("Siguiente") or time.time() - start_time > 120:
        duracion = round(time.time() - start_time)
        st.session_state.puntuaciones.append(7)
        st.session_state.evaluaciones.append("Evaluaci√≥n autom√°tica")
        st.session_state.tiempos.append(duracion)
        st.session_state.pregunta_actual += 1
        st.experimental_rerun()


def mostrar_resultados():
    st.title("¬°Entrevista completada!")

    puntuacion_total = sum(st.session_state.puntuaciones)
    tiempo_total = sum(st.session_state.tiempos)
    evaluacion_final = "Ejemplo de evaluaci√≥n final"

    datos = st.session_state.datos.copy()
    datos.update({
        "puntuacion_total": puntuacion_total,
        "evaluacion_final": evaluacion_final,
        "tiempo_total": tiempo_total,
        "puntuaciones": st.session_state.puntuaciones,
        "evaluaciones": st.session_state.evaluaciones
    })

    st.markdown(f"‚úÖ Puntuaci√≥n total: {puntuacion_total} puntos")
    st.markdown(f"‚è±Ô∏è Tiempo total: {tiempo_total} segundos")
    st.markdown("üì¶ Enviando datos a Monday...")

    success, msg = enviar_a_monday(datos, api_key="eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjI5NzQ5NDgyNCwiYWFpIjoxMSwidWlkIjo0NDIyNjMxNiwiaWFkIjoiMjAyMy0xMS0yMFQxNzowNjozNC4wMDBaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6MTY4ODEzMjIsInJnbiI6ImV1YzEifQ.o1cqRb0B9pGxLS2PQQbU4_RkQlhW3GhGVkGUV3xiCxI", board_id=1939525964)

    if success:
        st.success("‚úÖ Entrevista enviada correctamente a Monday.")
    else:
        st.error(f"‚ùå Hubo un problema al enviar la entrevista a Monday: {msg}")


def main():
    if "pagina" not in st.session_state:
        st.session_state.pagina = "login"

    if st.session_state.pagina == "login":
        login()
    elif st.session_state.pagina == "rol":
        pantalla_rol()
    elif st.session_state.pagina == "datos":
        pantalla_datos()
    elif st.session_state.pagina == "entrevista":
        entrevista()
    elif st.session_state.pagina == "resultados":
        mostrar_resultados()


if __name__ == "__main__":
    main()